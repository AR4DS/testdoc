#:page_title
"从Selenium RC向Selenium WebDriver迁移"

#:previous_link
"15_locating_techniques"

#:previous_title
"定位技术"

#:next_link
""

#:next_title
""

#:side
:list
<li><a class="reference internal" href="#">从Selenium RC迁移到Selenium WebDriver</a><ul class="treeview">
<li><a class="reference internal" href="#how-to-migrate-to-selenium-webdriver">如何迁移到Selenium WebDriver</a></li>
<li><a class="reference internal" href="#why-migrate-to-webdriver">为什么迁移到WebDriver</a></li>
<li><a class="reference internal" href="#before-starting">开始之前</a></li>
<li><a class="reference internal" href="#getting-started">现在开始</a></li>
<li><a class="reference internal" href="#next-steps">下一步</a></li>
<li class="expandable lastExpandable"><div class="hitarea expandable-hitarea lastExpandable-hitarea"></div><a class="reference internal" href="#common-problems">常见问题</a><ul class="treeview" style="display: none;">
<li><a class="reference internal" href="#clicking-and-typing-is-more-complete">Clicking and Typing更加完善</a></li>
<li><a class="reference internal" href="#waitforpagetoload-returns-too-soon">WaitForPageToLoad返回更快</a></li>
<li><a class="reference internal" href="#finding-by-xpath-or-css-selectors-doesn-t-always-work-but-it-does-in-selenium-1">按照XPath或CSS定位并不总是有效,但在Selenium 1有效</a></li>
<li><a class="reference internal" href="#there-is-no-browserbot">没有Browserbot</a></li>
<li class="last"><a class="reference internal" href="#executing-javascript-doesn-t-return-anything">执行Javascript不返回任何东西</a></li>
</ul>

#:body
:body
<h1>从Selenium RC迁移到Selenium WebDriver<a class="headerlink" href="#migrating-from-selenium-rc-to-selenium-webdriver" title="Permalink to this headline">¶</a></h1>
<div class="section" id="how-to-migrate-to-selenium-webdriver">
<span id="migrating-to-webdriver-reference"></span><h2>如何迁移到Selenium WebDriver<a class="headerlink" href="#how-to-migrate-to-selenium-webdriver" title="Permalink to this headline">¶</a></h2>
<p>当采用Selenium 2时有一个常见的问题是在增加新用例到已有的用例集时怎么做才是正确的? 对于框架的新用户可以使用新的WebDriver APIs来编写他们的测试用例。 
但是对于已有测试套件的旧用户怎么办呢? 这个文档用来演示如何迁移已有的测试用例到新的APIs, 让所有新测试用例都使用由WebDriver提供的新功能编写。</p>
<p>这里介绍的方法描述了无需任何返工针对性的迁移到WebDriver APIs。 这意为着你可以有更多的时间去迁移已有的测试, 这可以更容易让你决定把精力放在哪。</p>
<p>该文档使用Java, 因为java对迁移有最好的支持。当我们为其它语言提供了更好的工具，该文档将扩展到包括这些语言。</p>
</div>
<div class="section" id="why-migrate-to-webdriver">
<h2>为什么迁移到WebDriver<a class="headerlink" href="#why-migrate-to-webdriver" title="Permalink to this headline">¶</a></h2>
<p>把测试套件从一个API迁移到另一个API需要花费大量的努力。 为什你和你的团队要进行迁移呢? 这里有几个原因告诉你为什么应该考虑把selenium测试迁移到WebDriver。</p>
<ul class="simple">
<li>较小的、紧凑的API。 WebDriver的API比原来Selenium RC API更加的支持面向对象，这可以让它更容易使用。</li>
<li>更好的用户行为模拟。  WebDriver尽可能的调用原生的事件去与页面交互。这个更加真实的模拟了用户在您网站和页面上的操作。
此外, WebDriver提供了高级的用户接口APIs允许你去模拟复杂的页面交互。</li>
<li>被浏览器厂商支持。 Opera, Mozilla和Google都是WebDriver发展的积极推动者，而且都有工程师参与到帮助框架的改进。
 通常这意味着WebDriver获得浏览器本身的支持: 您的测试将更快、更稳定的允许。</li>
</ul>
</div>
<div class="section" id="before-starting">
<h2>开始之前<a class="headerlink" href="#before-starting" title="Permalink to this headline">¶</a></h2>
<p>为了让迁移的过程尽可能的顺利, 确信你的测试在Selenium的最新版本都可以运行。 这听起来很应该，但是最好还是要说一下!</p>
</div>
<div class="section" id="getting-started">
<h2>正式开始<a class="headerlink" href="#getting-started" title="Permalink to this headline">¶</a></h2>
<p>开始迁移的第一步是改变你获取Selenium实例的方式。在使用Selenium RC时应该像这样:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">Selenium</span> <span class="n">selenium</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultSelenium</span><span class="o">(</span>
    <span class="s">"localhost"</span><span class="o">,</span> <span class="mi">4444</span><span class="o">,</span> <span class="s">"*firefox"</span><span class="o">,</span> <span class="s">"http://www.yoursite.com"</span><span class="o">);</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</pre></div>
</div>
<p>这个应该被替换成这样:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">();</span>
<span class="n">Selenium</span> <span class="n">selenium</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebDriverBackedSelenium</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="s">"http://www.yoursite.com"</span><span class="o">);</span>
</pre></div>
</div>
<p>一旦你修改了，运行你已有的测试。这将给你一个有多少工作量需要去做的反馈 。
Selenium模拟虽好，但并不完美, 所以当有一些小的瑕疵是完全正常的。</p>
</div>
<div class="section" id="next-steps">
<h2>下一步<a class="headerlink" href="#next-steps" title="Permalink to this headline">¶</a></h2>
<p>当你的测试运行没有错误了, 下一步就是迁移实际的测试代码到WebDriver APIs。这过程的时间长短取决于你的代码抽象的质量。
这两种情况下, 使用的方法是相同的，而且可以简单总结:当你编辑它的时候修改代码使用新的API。</p>
<p>如果你需要从selenium实例中提取底层webdriver的实现, 你可以简单的转换为WrapsDriver:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="o">((</span><span class="n">WrapsDriver</span><span class="o">)</span> <span class="n">selenium</span><span class="o">).</span><span class="na">getWrappedDriver</span><span class="o">();</span>
</pre></div>
</div>
<p>这个允许你继续正常的传递Selenium实例, 并且在需要的时候解封装WebDriver。</p>
<p>At some point, you’re codebase will mostly be using the newer APIs. At this point, you can flip the relationship, using WebDriver throughout and instantiating a Selenium instance on demand:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">Selenium</span> <span class="n">selenium</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebDriverBackedSelenium</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="n">baseUrl</span><span class="o">);</span>
</pre></div>
</div>
</div>
<div class="section" id="common-problems">
<h2>Common Problems<a class="headerlink" href="#common-problems" title="Permalink to this headline">¶</a></h2>
<p>Fortunately, you’re not the first person to go through this migration, so here are some common problems that others have seen, and how to solve them.</p>
<div class="section" id="clicking-and-typing-is-more-complete">
<h3>Clicking and Typing is More Complete<a class="headerlink" href="#clicking-and-typing-is-more-complete" title="Permalink to this headline">¶</a></h3>
<p>A common pattern in a Selenium RC test is to see something like:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">selenium</span><span class="o">.</span><span class="na">type</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"exciting tex"</span><span class="o">);</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">keyDown</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"t"</span><span class="o">);</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">keyPress</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"t"</span><span class="o">);</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">keyUp</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"t"</span><span class="o">);</span>
</pre></div>
</div>
<p>This relies on the fact that “type” simply replaces the content of the identified element without also firing all the events that would normally be fired if a user interacts with the page. The final direct invocations of “key*” cause the JS handlers to fire as expected.</p>
<p>When using the WebDriverBackedSelenium, the result of filling in the form field would be “exciting texttt”: not what you’d expect! The reason for this is that WebDriver more accurately emulates user behavior, and so will have been firing events all along.</p>
<p>This same fact may sometimes cause a page load to fire earlier than it would do in a Selenium 1 test. You can tell that this has happened if a “StaleElementException” is thrown by WebDriver.</p>
</div>
<div class="section" id="waitforpagetoload-returns-too-soon">
<h3>WaitForPageToLoad Returns Too Soon<a class="headerlink" href="#waitforpagetoload-returns-too-soon" title="Permalink to this headline">¶</a></h3>
<p>Discovering when a page load is complete is a tricky business. Do we mean “when the load event fires”, “when all AJAX requests are complete”, “when there’s no network traffic”, “when document.readyState has changed” or something else entirely?</p>
<p>WebDriver attempts to simulate the original Selenium behavior, but this doesn’t always work perfectly for various reasons. The most common reason is that it’s hard to tell the difference between a page load not having started yet, and a page load having completed between method calls. This sometimes means that control is returned to your test before the page has finished (or even started!) loading.</p>
<p>The solution to this is to wait on something specific. Commonly, this might be for the element you want to interact with next, or for some Javascript variable to be set to a specific value. An example would be:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">Wait</span><span class="o">&lt;</span><span class="n">WebDriver</span><span class="o">&gt;</span> <span class="n">wait</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebDriverWait</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>
<span class="n">WebElement</span> <span class="n">element</span><span class="o">=</span> <span class="n">wait</span><span class="o">.</span><span class="na">until</span><span class="o">(</span><span class="n">visibilityOfElementLocated</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="s">"some_id"</span><span class="o">)));</span>
</pre></div>
</div>
<p>Where “visibilityOfElementLocated” is implemented as:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="kd">public</span> <span class="n">ExpectedCondition</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="nf">visibilityOfElementLocated</span><span class="o">(</span><span class="kd">final</span> <span class="n">By</span> <span class="n">locator</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="n">ExpectedCondition</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;()</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">WebElement</span> <span class="nf">apply</span><span class="o">(</span><span class="n">WebDriver</span> <span class="n">driver</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">WebElement</span> <span class="n">toReturn</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">locator</span><span class="o">);</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">toReturn</span><span class="o">.</span><span class="na">isDisplayed</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">toReturn</span><span class="o">;</span>
      <span class="o">}</span>
      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">};</span>
<span class="o">}</span>
</pre></div>
</div>
<p>This may look complex, but it’s almost all boiler-plate code. The only interesting bit is that the “ExpectedCondition” will be evaluated repeatedly until the “apply” method returns something that is neither “null” nor Boolean.FALSE.</p>
<p>Of course, adding all these “wait” calls may clutter up your code. If that’s the case, and your needs are simple, consider using the implicit waits:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">manage</span><span class="o">().</span><span class="na">timeouts</span><span class="o">().</span><span class="na">implicitlyWait</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</pre></div>
</div>
<p>By doing this, every time an element is located, if the element is not present, the location is retried until either it is present, or until 30 seconds have passed.</p>
</div>
<div class="section" id="finding-by-xpath-or-css-selectors-doesn-t-always-work-but-it-does-in-selenium-1">
<h3>Finding By XPath or CSS Selectors Doesn’t Always Work, But It Does In Selenium 1<a class="headerlink" href="#finding-by-xpath-or-css-selectors-doesn-t-always-work-but-it-does-in-selenium-1" title="Permalink to this headline">¶</a></h3>
<p>In Selenium 1, it was common for xpath to use a bundled library rather than the capabilities of the browser itself. WebDriver will always use the native browser methods unless there’s no alternative. That means that complex xpath expressions may break on some browsers.</p>
<p>CSS Selectors in Selenium 1 were implemented using the Sizzle library. This implements a superset of the CSS Selector spec, and it’s not always clear where you’ve crossed the line. If you’re using the WebDriverBackedSelenium and use a Sizzle locator instead of a CSS Selector for finding elements, a warning will be logged to the console. It’s worth taking the time to look for these, particularly if tests are failing because of not being able to find elements.</p>
</div>
<div class="section" id="there-is-no-browserbot">
<h3>There is No Browserbot<a class="headerlink" href="#there-is-no-browserbot" title="Permalink to this headline">¶</a></h3>
<p>Selenium RC was based on Selenium Core, and therefore when you executed Javascript, you could access bits of Selenium Core to make things easier. As WebDriver is not based on Selenium Core, this is no longer possible. How can you tell if you’re using Selenium Core? Simple! Just look to see if your “getEval” or similar calls are using “selenium” or “browserbot” in the evaluated Javascript.</p>
<p>You might be using the browserbot to obtain a handle to the current window or document of the test. Fortunately, WebDriver always evaluates JS in the context of the current window, so you can use “window” or “document” directly.</p>
<p>Alternatively, you might be using the browserbot to locate elements. In WebDriver, the idiom for doing this is to first locate the element, and then pass that as an argument to the Javascript. Thus:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">selenium</span><span class="o">.</span><span class="na">getEval</span><span class="o">(</span>
    <span class="s">"selenium.browserbot.findElement('id=foo', browserbot.getCurrentWindow()).tagName"</span><span class="o">);</span>
</pre></div>
</div>
<p>becomes:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="s">"foo"</span><span class="o">));</span>
<span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span> <span class="n">driver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span>
    <span class="s">"return arguments[0].tagName"</span><span class="o">,</span> <span class="n">element</span><span class="o">);</span>
</pre></div>
</div>
<p>Notice how the passed in “element” variable appears as the first item in the JS standard “arguments” array.</p>
</div>
<div class="section" id="executing-javascript-doesn-t-return-anything">
<h3>Executing Javascript Doesn’t Return Anything<a class="headerlink" href="#executing-javascript-doesn-t-return-anything" title="Permalink to this headline">¶</a></h3>
<p>WebDriver’s JavascriptExecutor will wrap all JS and evaluate it as an anonymous expression. This means that you need to use the “return” keyword:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">String</span> <span class="n">title</span> <span class="o">=</span> <span class="n">selenium</span><span class="o">.</span><span class="na">getEval</span><span class="o">(</span><span class="s">"browserbot.getCurrentWindow().document.title"</span><span class="o">);</span>
</pre></div>
</div>
<p>becomes:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span> <span class="n">driver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span><span class="s">"return document.title;"</span><span class="o">);</span>
</pre></div>
