#:page_title
"从Selenium RC向Selenium WebDriver迁移"

#:previous_link
"15_locating_techniques"

#:previous_title
"定位技术"

#:next_link
""

#:next_title
""

#:side
:list
<li><a class="reference internal" href="#">从Selenium RC迁移到Selenium WebDriver</a><ul class="treeview">
<li><a class="reference internal" href="#how-to-migrate-to-selenium-webdriver">如何迁移到Selenium WebDriver</a></li>
<li><a class="reference internal" href="#why-migrate-to-webdriver">为什么迁移到WebDriver</a></li>
<li><a class="reference internal" href="#before-starting">开始之前</a></li>
<li><a class="reference internal" href="#getting-started">现在开始</a></li>
<li><a class="reference internal" href="#next-steps">下一步</a></li>
<li class="expandable lastExpandable"><div class="hitarea expandable-hitarea lastExpandable-hitarea"></div><a class="reference internal" href="#common-problems">常见问题</a><ul class="treeview" style="display: none;">
<li><a class="reference internal" href="#clicking-and-typing-is-more-complete">Clicking and Typing更加完善</a></li>
<li><a class="reference internal" href="#waitforpagetoload-returns-too-soon">WaitForPageToLoad返回更快</a></li>
<li><a class="reference internal" href="#finding-by-xpath-or-css-selectors-doesn-t-always-work-but-it-does-in-selenium-1">按照XPath或CSS定位并不总是有效,但在Selenium 1有效</a></li>
<li><a class="reference internal" href="#there-is-no-browserbot">没有Browserbot</a></li>
<li class="last"><a class="reference internal" href="#executing-javascript-doesn-t-return-anything">执行Javascript不返回任何东西</a></li>
</ul>

#:body
:body
<h1>从Selenium RC迁移到Selenium WebDriver<a class="headerlink" href="#migrating-from-selenium-rc-to-selenium-webdriver" title="Permalink to this headline">¶</a></h1>
<div class="section" id="how-to-migrate-to-selenium-webdriver">
<span id="migrating-to-webdriver-reference"></span><h2>如何迁移到Selenium WebDriver<a class="headerlink" href="#how-to-migrate-to-selenium-webdriver" title="Permalink to this headline">¶</a></h2>
<p>当采用Selenium 2时有一个常见的问题是在增加新用例到已有的用例集时怎么做才是正确的? 对于框架的新用户可以使用新的WebDriver APIs来编写他们的测试用例。 
但是对于已有测试套件的旧用户怎么办呢? 这个文档用来演示如何迁移已有的测试用例到新的APIs, 让所有新测试用例都使用由WebDriver提供的新功能编写。</p>
<p>这里介绍的方法描述了无需任何返工针对性的迁移到WebDriver APIs。 这意为着你可以有更多的时间去迁移已有的测试, 这可以更容易让你决定把精力放在哪。</p>
<p>该文档使用Java, 因为java对迁移有最好的支持。当我们为其它语言提供了更好的工具，该文档将扩展到包括这些语言。</p>
</div>
<div class="section" id="why-migrate-to-webdriver">
<h2>为什么迁移到WebDriver<a class="headerlink" href="#why-migrate-to-webdriver" title="Permalink to this headline">¶</a></h2>
<p>把测试套件从一个API迁移到另一个API需要花费大量的努力。 为什你和你的团队要进行迁移呢? 这里有几个原因告诉你为什么应该考虑把selenium测试迁移到WebDriver。</p>
<ul class="simple">
<li>较小的、紧凑的API。 WebDriver的API比原来Selenium RC API更加的支持面向对象，这可以让它更容易使用。</li>
<li>更好的用户行为模拟。  WebDriver尽可能的调用原生的事件去与页面交互。这个更加真实的模拟了用户在您网站和页面上的操作。
此外, WebDriver提供了高级的用户接口APIs允许你去模拟复杂的页面交互。</li>
<li>被浏览器厂商支持。 Opera, Mozilla和Google都是WebDriver发展的积极推动者，而且都有工程师参与到帮助框架的改进。
 通常这意味着WebDriver获得浏览器本身的支持: 您的测试将更快、更稳定的允许。</li>
</ul>
</div>
<div class="section" id="before-starting">
<h2>开始之前<a class="headerlink" href="#before-starting" title="Permalink to this headline">¶</a></h2>
<p>为了让迁移的过程尽可能的顺利, 确信你的测试在Selenium的最新版本都可以运行。 这听起来很应该，但是最好还是要说一下!</p>
</div>
<div class="section" id="getting-started">
<h2>正式开始<a class="headerlink" href="#getting-started" title="Permalink to this headline">¶</a></h2>
<p>开始迁移的第一步是改变你获取Selenium实例的方式。在使用Selenium RC时应该像这样:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">Selenium</span> <span class="n">selenium</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultSelenium</span><span class="o">(</span>
    <span class="s">"localhost"</span><span class="o">,</span> <span class="mi">4444</span><span class="o">,</span> <span class="s">"*firefox"</span><span class="o">,</span> <span class="s">"http://www.yoursite.com"</span><span class="o">);</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</pre></div>
</div>
<p>这个应该被替换成这样:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirefoxDriver</span><span class="o">();</span>
<span class="n">Selenium</span> <span class="n">selenium</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebDriverBackedSelenium</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="s">"http://www.yoursite.com"</span><span class="o">);</span>
</pre></div>
</div>
<p>一旦你修改了，运行你已有的测试。这将给你一个有多少工作量需要去做的反馈 。
Selenium模拟虽好，但并不完美, 所以当有一些小的瑕疵是完全正常的。</p>
</div>
<div class="section" id="next-steps">
<h2>下一步<a class="headerlink" href="#next-steps" title="Permalink to this headline">¶</a></h2>
<p>当你的测试运行没有错误了, 下一步就是迁移实际的测试代码到WebDriver APIs。这过程的时间长短取决于你的代码抽象的质量。
这两种情况下, 使用的方法是相同的，而且可以简单总结:当你编辑它的时候修改代码使用新的API。</p>
<p>如果你需要从selenium实例中提取底层webdriver的实现, 你可以简单的转换为WrapsDriver:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebDriver</span> <span class="n">driver</span> <span class="o">=</span> <span class="o">((</span><span class="n">WrapsDriver</span><span class="o">)</span> <span class="n">selenium</span><span class="o">).</span><span class="na">getWrappedDriver</span><span class="o">();</span>
</pre></div>
</div>
<p>这个允许你继续正常的传递Selenium实例, 并且在需要的时候解封装WebDriver。</p>
<p>在某些时候，你的代码库将主要使用新API。此时您可以翻转关系，
在必要的时候始终使用webdriver实例化Selenium:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">Selenium</span> <span class="n">selenium</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebDriverBackedSelenium</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="n">baseUrl</span><span class="o">);</span>
</pre></div>
</div>
</div>
<div class="section" id="common-problems">
<h2>常见问题<a class="headerlink" href="#common-problems" title="Permalink to this headline">¶</a></h2>
<p>可幸的是, 你不是第一个想到要迁移的人，所以这里有一些其他人在迁移时发现的问题及解决方法。</p>
<div class="section" id="clicking-and-typing-is-more-complete">
<h3>Clicking和Typing更完善<a class="headerlink" href="#clicking-and-typing-is-more-complete" title="Permalink to this headline">¶</a></h3>
<p>在Selenium RC中一个常见的模式应该像这样:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">selenium</span><span class="o">.</span><span class="na">type</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"exciting tex"</span><span class="o">);</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">keyDown</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"t"</span><span class="o">);</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">keyPress</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"t"</span><span class="o">);</span>
<span class="n">selenium</span><span class="o">.</span><span class="na">keyUp</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"t"</span><span class="o">);</span>
</pre></div>
</div>
<p>这依赖于一个事实，即 “type”仅仅简单的替换了识别元素的内容，而没有触发用户正常使用页面时应该触发的所有事件。
最后直接调用 “key*”触发JS处理来达到预期触发效果。</p>
<p>当使用 WebDriverBackedSelenium时，在form字段里填写内容后的结果是这样 “exciting texttt”: 而这不是你所期望的! 
这样做的原因是，webdriver会更精确地模拟用户的行为，因此将始终触发事件。</p>
<p>同样的情况，在Selenium 1的测试中有时可能会导致页面加载的触发早于它实际要做的。
如果WebDriver抛出“StaleElementException”异常，你就可以告诉大家发生了什么情况。</p>
</div>
<div class="section" id="waitforpagetoload-returns-too-soon">
<h3>WaitForPageToLoad返回更快<a class="headerlink" href="#waitforpagetoload-returns-too-soon" title="Permalink to this headline">¶</a></h3>
<p>我们发现当页面加载完成后是一个棘手的事情。我们的意思是“当load事件触发时”, “当所有的AJAX请求完成时”, “当没有网络流量时”, 
“当document.readyState改变时”或者别的什么东西?</p>
<p>WebDriver尝试去模仿原生的Selenium行为，但是由于某些原因 并不总是工作的很完美。
 大多数的原因是它很难识别一个页面还没开始加载和通过方法间的调用已经加载完成之间的不同。
 这就意味着在页面完成 (或未开始!)加载之前，控制已经返回到你的测试中。</p>
<p>解决办法是 等待一个特定的东西。 通常，这个可能是你下一步将要进行操作的元素， 或者某些Javascript变了被设置成了特定的值。 看看样例:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">Wait</span><span class="o">&lt;</span><span class="n">WebDriver</span><span class="o">&gt;</span> <span class="n">wait</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebDriverWait</span><span class="o">(</span><span class="n">driver</span><span class="o">,</span> <span class="mi">30</span><span class="o">);</span>
<span class="n">WebElement</span> <span class="n">element</span><span class="o">=</span> <span class="n">wait</span><span class="o">.</span><span class="na">until</span><span class="o">(</span><span class="n">visibilityOfElementLocated</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="s">"some_id"</span><span class="o">)));</span>
</pre></div>
</div>
<p>“visibilityOfElementLocated”的实现如下:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="kd">public</span> <span class="n">ExpectedCondition</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;</span> <span class="nf">visibilityOfElementLocated</span><span class="o">(</span><span class="kd">final</span> <span class="n">By</span> <span class="n">locator</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="n">ExpectedCondition</span><span class="o">&lt;</span><span class="n">WebElement</span><span class="o">&gt;()</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">WebElement</span> <span class="nf">apply</span><span class="o">(</span><span class="n">WebDriver</span> <span class="n">driver</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">WebElement</span> <span class="n">toReturn</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">locator</span><span class="o">);</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">toReturn</span><span class="o">.</span><span class="na">isDisplayed</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">toReturn</span><span class="o">;</span>
      <span class="o">}</span>
      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">};</span>
<span class="o">}</span>
</pre></div>
</div>
<p>这个看起来可能比较复杂，但几乎是所有的代码。 唯一有趣的一点是“ExpectedCondition”会反复评估 直到“apply”方法返回一些 “null”或布尔值FALSE。</p>
<p>当然, 添加所有这些“wait”调用 可能会弄乱你的代码。 如果真是这样而你又希望代码简单，那么可以考虑使用隐式等待:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">driver</span><span class="o">.</span><span class="na">manage</span><span class="o">().</span><span class="na">timeouts</span><span class="o">().</span><span class="na">implicitlyWait</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</pre></div>
</div>
<p>这样做每次定位元素时，如果元素没有出现， 定位将一直尝试直到它出现或者30秒超时。 </p>
</div>
<div class="section" id="finding-by-xpath-or-css-selectors-doesn-t-always-work-but-it-does-in-selenium-1">
<h3>通过XPath或CSS选择器查找并不总是工作, 但是在Selenium 1正常<a class="headerlink" href="#finding-by-xpath-or-css-selectors-doesn-t-always-work-but-it-does-in-selenium-1" title="Permalink to this headline">¶</a></h3>
<p>在Selenium 1, 对于xpath通常使用绑定的库 而不是浏览器本身的功能。 WebDriver将总是使用浏览器原生的方法除非没有替代。
这意味着复杂的xpath表达式在某些浏览器中可能会失败。</p>
<p>CSS选择器在Selenium 1是使用Sizzle库实现的。这个实现是CSS选择器规范的超集, 而且它并不总是很清楚你在哪跨行了。
如果你使用WebDriverBackedSelenium并且使用Sizzle定位器替代CSS选择器查找元素，一个警告将被打印在命令行。
这是值得花些时间看的，特别是如果因为不能够找到元素而导致测试失败时。</p>
</div>
<div class="section" id="there-is-no-browserbot">
<h3>没有Browserbot<a class="headerlink" href="#there-is-no-browserbot" title="Permalink to this headline">¶</a></h3>
<p>Selenium RC是基于Selenium Core，因此当你执行Javascript时， 你可以访问Selenium Core的内容来让事情变得更容易。
因为WebDriver并不基于Selenium Core，并且不再可能。如果你使用Selenium Core怎么告诉它? 简单的! 
只要看看在Javascript中你的“getEval”或类似的调用是否使用了 “selenium” 或 “browserbot”。</p>
<p>你可能会使用browserbot取获取当前测试窗口或doc的句柄。 幸运的是，WebDriver总是在当前的窗口上下文环境中执行 JS，所以你可以直接使用“window” 或 “document”。</p>
<p>或者，您可能会使用browserbot定位元素。在WebDriver中，要这样做首先是定位元素，然后把元素作为参数传递为Javascript。 因此:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">selenium</span><span class="o">.</span><span class="na">getEval</span><span class="o">(</span>
    <span class="s">"selenium.browserbot.findElement('id=foo', browserbot.getCurrentWindow()).tagName"</span><span class="o">);</span>
</pre></div>
</div>
<p>就变成:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">WebElement</span> <span class="n">element</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="na">findElement</span><span class="o">(</span><span class="n">By</span><span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="s">"foo"</span><span class="o">));</span>
<span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span> <span class="n">driver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span>
    <span class="s">"return arguments[0].tagName"</span><span class="o">,</span> <span class="n">element</span><span class="o">);</span>
</pre></div>
</div>
<p>注意如何传递“element”变量作为JS标准“arguments”数组的第一个选项。</p>
</div>
<div class="section" id="executing-javascript-doesn-t-return-anything">
<h3>执行Javascript没有任何返回值<a class="headerlink" href="#executing-javascript-doesn-t-return-anything" title="Permalink to this headline">¶</a></h3>
<p>WebDriver的Javascript执行器 会包装所有的JS并且以匿名表达执行。这意味着你需要使用“return”关键字:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="n">String</span> <span class="n">title</span> <span class="o">=</span> <span class="n">selenium</span><span class="o">.</span><span class="na">getEval</span><span class="o">(</span><span class="s">"browserbot.getCurrentWindow().document.title"</span><span class="o">);</span>
</pre></div>
</div>
<p>就变成:</p>
<div class="highlight-java"><div class="highlight"><pre><span class="o">((</span><span class="n">JavascriptExecutor</span><span class="o">)</span> <span class="n">driver</span><span class="o">).</span><span class="na">executeScript</span><span class="o">(</span><span class="s">"return document.title;"</span><span class="o">);</span>
</pre></div>
