#:page_title
"selenium用户扩展"

#:previous_link
"07_selenium_grid"

#:previous_title
"Selenium-Grid"

#:next_link
"09_cheat_sheet"

#:next_title
"Selenium WebDriver速查表"

#:side
:list
<li><a class="reference internal" href="#">用户扩展</a><ul class="treeview">
<li><a class="reference internal" href="#introduction">引言</a></li>
<li><a class="reference internal" href="#actions">Actions</a></li>
<li class="expandable"><div class="hitarea expandable-hitarea"></div><a class="reference internal" href="#accessors-assertions">Accessors/Assertions</a><ul class="treeview" style="display: none;">
<li class="last"><a class="reference internal" href="#prototype-generates-additional-commands">原型生成的附加命令</a></li>
</ul>
</li>
<li><a class="reference internal" href="#locator-strategies">Locator Strategies</a></li>
<li><a class="reference internal" href="#using-user-extensions-with-selenium-ide">在Selenium-IDE中使用用户扩展</a></li>
<li class="expandable lastExpandable"><div class="hitarea expandable-hitarea lastExpandable-hitarea"></div><a class="reference internal" href="#using-user-extensions-with-selenium-rc">在Selenium RC中使用用户扩展</a><ul class="treeview" style="display: none;">
<li class="last"><a class="reference internal" href="#example">示例</a></li>

#:body
:body
<h1>User-Extensions<a class="headerlink" href="#user-extensions" title="Permalink to this headline">¶</a></h1>
<p><em>注释：本节接近完成，但还没有被审核和编辑</em></p>
<div class="section" id="introduction">
<span id="chapter08-reference"></span><h2>Introduction<a class="headerlink" href="#introduction" title="Permalink to this headline">¶</a></h2>
<p>通过增加自定义的actions，assertions和定位器策略（locator-strategies），可以很简单的扩展Selenium。增加Javascript方法到Selenium对象原型和PageBot对象原型。在启动时，Selenium会自动查找在这些原型中的方法，使用名称模式来识别哪些是action，哪些是assertions和locators。下面的示例反应了如何用Javascript扩展Selenium。</p>
</div>
<div class="section" id="actions">
<h2>Actions<a class="headerlink" href="#actions" title="Permalink to this headline">¶</a></h2>
<p>在Selenium原型中，以“do”开始的所有方法被添加做action。对每个action foo，会自动注册一个action fooAndWait 。每个action最多可带有两个参数，在测试中被传递做第二和第三列值。例如：增加一个“typeRepeated” action到Selenium，它向一个文本框键入两次文本。</p>
<div class="highlight-javascript" style="display: none;"><div class="highlight"><pre><span class="nx">Selenium</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">doTypeRepeated</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">locator</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 所有的定位器策略由"findElement"自动处理</span>
    <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">page</span><span class="p">().</span><span class="nx">findElement</span><span class="p">(</span><span class="nx">locator</span><span class="p">);</span>

    <span class="c1">// 创建要键入的文本</span>
    <span class="kd">var</span> <span class="nx">valueToType</span> <span class="o">=</span> <span class="nx">text</span> <span class="o">+</span> <span class="nx">text</span><span class="p">;</span>

    <span class="c1">// 用新文本替代Element文本</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">page</span><span class="p">().</span><span class="nx">replaceText</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">valueToType</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</div>
</div>
<div class="section" id="accessors-assertions">
<h2>Accessors/Assertions<a class="headerlink" href="#accessors-assertions" title="Permalink to this headline">¶</a></h2>
<p>在Selenium原型中，所有的<em>get</em>Foo和<em>is</em>Foo方法都是作为accessors方法（storeFoo）被添加的。每一个accessor都会有一个assertFoo，verifyFoo 和waitForFoo被注册。一个assert方法最多能有两个参数，在测试中被传递做第二和第三列值。你也可以自定义字面的assertion，作为简单的“assert”方法，这也会自动生成 “verify” 和“waitFor” 命令。例如：增加一个valueRepeated assertion，用来确保元素只是由提供的文本经重复组成。在测试中，2个可用的命令是assertValueRepeated 和 verifyValueRepeated。</p>
<div class="highlight-javascript" style="display: none;"><div class="highlight"><pre><span class="nx">Selenium</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">assertValueRepeated</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">locator</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 所有的定位器策略由"findElement"自动处理</span>
    <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">page</span><span class="p">().</span><span class="nx">findElement</span><span class="p">(</span><span class="nx">locator</span><span class="p">);</span>

    <span class="c1">// 创建要验证的文本</span>
    <span class="kd">var</span> <span class="nx">expectedValue</span> <span class="o">=</span> <span class="nx">text</span> <span class="o">+</span> <span class="nx">text</span><span class="p">;</span>

    <span class="c1">// 得到实际的Element值</span>
    <span class="kd">var</span> <span class="nx">actualValue</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>

    <span class="c1">// 确保实际Element值与预期相符</span>
    <span class="nx">Assert</span><span class="p">.</span><span class="nx">matches</span><span class="p">(</span><span class="nx">expectedValue</span><span class="p">,</span> <span class="nx">actualValue</span><span class="p">);</span>
<span class="p">};</span>
</pre></div>
</div>
<div class="section" id="prototype-generates-additional-commands">
<h3>原型生成的附加命令<a class="headerlink" href="#prototype-generates-additional-commands" title="Permalink to this headline">¶</a></h3>
<p>Selenium原型中所有的<em>get</em>Foo和<em>is</em>方法会自动地导致storeFoo， assertFoo，assertNotFoo，verifyFoo，verifyNotFoo，waitForFoo和waitForNotFoo命令可用。例如，如果你增加一个<tt class="docutils literal"><span class="pre">getTextLength()</span></tt>方法，下面的命令将自动可用：<tt class="docutils literal"><span class="pre">storeTextLength</span></tt>，<tt class="docutils literal"><span class="pre">assertTextLength</span></tt>，
<tt class="docutils literal"><span class="pre">assertNotTextLength</span></tt>，<tt class="docutils literal"><span class="pre">verifyTextLength</span></tt>，<tt class="docutils literal"><span class="pre">verifyNotTextLength</span></tt>，
<tt class="docutils literal"><span class="pre">waitForTextLength</span></tt>，和<tt class="docutils literal"><span class="pre">waitForNotTextLength</span></tt>命令。</p>
<div class="highlight-javascript" style="display: none;"><div class="highlight"><pre><span class="nx">Selenium</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTextLength</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">locator</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getText</span><span class="p">(</span><span class="nx">locator</span><span class="p">).</span><span class="nx">length</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</div>
<p>同样要注意上面描述的<tt class="docutils literal"><span class="pre">assertValueRepeated</span></tt>方法也可以实现为<tt class="docutils literal"><span class="pre">isValueRepeated</span></tt>，额外的好处是，同样可以自动得到assertNotValueRepeated，storeValueRepeated，waitForValueRepeated 和waitForNotValueRepeated。</p>
</div>
</div>
<div class="section" id="locator-strategies">
<h2>Locator Strategies<a class="headerlink" href="#locator-strategies" title="Permalink to this headline">¶</a></h2>
<p>PageBot原型的所有locateElementByFoo方法被作为定位器策略添加。一个定位器策略（locator strategy）带有2个参数，第一个是locator串（减去前缀），第二个是待搜索的文档。例如：增加一个“valuerepeated=”定位器，查找第一个满足value属性值等于提供值的重复的element。</p>
<div class="highlight-javascript" style="display: none;"><div class="highlight"><pre><span class="c1">// "inDocument"是你正在搜索的那个文档。</span>
<span class="nx">PageBot</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">locateElementByValueRepeated</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">inDocument</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 创建要搜索的文本</span>
    <span class="kd">var</span> <span class="nx">expectedValue</span> <span class="o">=</span> <span class="nx">text</span> <span class="o">+</span> <span class="nx">text</span><span class="p">;</span>

    <span class="c1">// 遍历所有Elements，查找那些满足</span>
    <span class="c1">// value === 我们的预期值 的Element</span>
    <span class="kd">var</span> <span class="nx">allElements</span> <span class="o">=</span> <span class="nx">inDocument</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">"*"</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">allElements</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">testElement</span> <span class="o">=</span> <span class="nx">allElements</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">testElement</span><span class="p">.</span><span class="nx">value</span> <span class="o">&amp;&amp;</span> <span class="nx">testElement</span><span class="p">.</span><span class="nx">value</span> <span class="o">===</span> <span class="nx">expectedValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">testElement</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>
</div>
</div>
<div class="section" id="using-user-extensions-with-selenium-ide">
<h2>在Selenium IDE中使用用户扩展<a class="headerlink" href="#using-user-extensions-with-selenium-ide" title="Permalink to this headline">¶</a></h2>
<p>在Selenium IDE中使用用户扩展非常容易。</p>
<ol class="arabic simple">
<li>创建你的用户扩展，并保存为user-extensions.js。尽管这个名称在技术上不是必须的，然而保持一致性是一个良好的实践。</li>
<li>打开Firefox，然后打开Selenium IDE。</li>
<li>依次点击Tools，Options</li>
<li>在Selenium核心扩展（Selenium Core Extensions）中点击浏览（Browse），并查找user-extensions. js文件，然后点击OK。</li>
<li>你的用户扩展还没有被加载，你必须关闭和重新启动Selenium IDE</li>
<li>在你的空白测试中，创建一个新命令，你的用户扩展现在应该是命令下拉列表中的一个选项了</li>
</ol>
</div>
<div class="section" id="using-user-extensions-with-selenium-rc">
<h2>在Selenium RC中使用用户扩展<a class="headerlink" href="#using-user-extensions-with-selenium-rc" title="Permalink to this headline">¶</a></h2>
<p>如果你Google“Selenium RC user-extension”十次，你会找到十个不同的使用这个特征的方法，下面是Selenium官方建议的方法</p>
<div class="section" id="example">
<h3>示例<a class="headerlink" href="#example" title="Permalink to this headline">¶</a></h3>
<p><strong>C#</strong></p>
<ol class="arabic simple">
<li>把你的用户扩展放在与Selenium服务器相同的目录下。</li>
<li>如果你正在使用由Selenium IDE生成的客户端代码，你需要做出几个小的修改。首先，你会需要在类的作用域创建一个<tt class="docutils literal"><span class="pre">HttpCommandProcessor</span></tt>对象（在SetupTest方法的外面，就在<tt class="docutils literal"><span class="pre">private</span> <span class="pre">StringBuilder</span> <span class="pre">verificationErrors;</span></tt>下面）</li>
</ol>
<div class="highlight-c#"><div class="highlight"><pre><span class="n">HttpCommandProcessor</span> <span class="n">proc</span><span class="p">;</span>
</pre></div>
</div>
<ol class="arabic simple" start="3">
<li>接着，实例化<tt class="docutils literal"><span class="pre">HttpCommandProcessor</span></tt>对象，这可以在建立测试的过程中实现。</li>
</ol>
<div class="highlight-c#"><div class="highlight"><pre><span class="n">proc</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpCommandProcessor</span><span class="p">(</span><span class="s">"localhost"</span><span class="p">,</span> <span class="m">4444</span><span class="p">,</span> <span class="s">"*iexplore"</span><span class="p">,</span> <span class="s">"http://google.ca/"</span><span class="p">);</span>
</pre></div>
</div>
<ol class="arabic simple" start="4">
<li>使用你创建的<tt class="docutils literal"><span class="pre">HttpCommandProcessor</span></tt>对象实例化DefaultSelenium对象。</li>
</ol>
<div class="highlight-c#"><div class="highlight"><pre><span class="n">selenium</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DefaultSelenium</span><span class="p">(</span><span class="n">proc</span><span class="p">);</span>
</pre></div>
</div>
<ol class="arabic simple" start="5">
<li>在你的测试代码中，调用<tt class="docutils literal"><span class="pre">HttpCommandProcessor</span></tt>的<tt class="docutils literal"><span class="pre">DoCommand()</span></tt>方法 ，执行你的用户扩展。这个方法带有两个参数：一个字符串标识你想要使用的用户扩展方法，一个字符串数组用以传递参数。注意你的函数的第一个字母是小写字母，而不用管在你的用户扩展中的大小写。Selenium自动如此处理以保证常见的Javascript命名惯例。因为Javascript是大小写敏感的，如果你的命令以大写字母开头，你的测试将失败。inputParams是你希望传递给Javascript用户扩展的参数数组。在上述情况中，数组只有一个字符串，因为我们的扩展只有一个参数，而更长的数组会将每个索引映射到相应的user-extension参数。牢记为Selenium IDE设计的用户扩展只能带有两个参数。</li>
</ol>
<div class="highlight-c#"><div class="highlight"><pre><span class="kt">string</span><span class="p">[]</span> <span class="n">inputParams</span> <span class="p">=</span> <span class="p">{</span><span class="s">"Hello World"</span><span class="p">};</span>
<span class="n">proc</span><span class="p">.</span><span class="n">DoCommand</span><span class="p">(</span><span class="s">"alertWrapper"</span><span class="p">,</span> <span class="n">inputParams</span><span class="p">);</span>
</pre></div>
</div>
<ol class="arabic simple" start="6">
<li>使用<tt class="docutils literal"><span class="pre">-userExtensions</span></tt>参数并传递你的<tt class="docutils literal"><span class="pre">user-extensions.js</span></tt>文件启动测试服务器。</li>
</ol>
<div class="highlight-bash"><div class="highlight"><pre>java -jar selenium-server.jar -userExtensions user-extensions.js
</pre></div>
</div>
<div class="highlight-csharp" style="display: none;"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text.RegularExpressions</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">NUnit.Framework</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Selenium</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">SeleniumTests</span>
<span class="p">{</span>
<span class="na">        [TestFixture]</span>
        <span class="k">public</span> <span class="k">class</span> <span class="nc">NewTest</span>
        <span class="p">{</span>

                <span class="k">private</span> <span class="n">ISelenium</span> <span class="n">selenium</span><span class="p">;</span>
                <span class="k">private</span> <span class="n">StringBuilder</span> <span class="n">verificationErrors</span><span class="p">;</span>
                <span class="k">private</span> <span class="n">HttpCommandProcessor</span> <span class="n">proc</span><span class="p">;</span>

<span class="na">                [SetUp]</span>
                <span class="k">public</span> <span class="k">void</span> <span class="nf">SetupTest</span><span class="p">()</span>
                <span class="p">{</span>
                        <span class="n">proc</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpCommandProcessor</span><span class="p">(</span><span class="s">"localhost"</span><span class="p">,</span> <span class="m">4444</span><span class="p">,</span> <span class="s">"*iexplore"</span><span class="p">,</span> <span class="s">"http://google.ca/"</span><span class="p">);</span>
                        <span class="n">selenium</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DefaultSelenium</span><span class="p">(</span><span class="n">proc</span><span class="p">);</span>
                        <span class="c1">//selenium = new DefaultSelenium("localhost", 4444, "*iexplore", "http://google.ca/");</span>
                        <span class="n">selenium</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
                        <span class="n">verificationErrors</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>

                <span class="p">}</span>

<span class="na">                [TearDown]</span>
                <span class="k">public</span> <span class="k">void</span> <span class="nf">TeardownTest</span><span class="p">()</span>
                <span class="p">{</span>
                        <span class="k">try</span>
                        <span class="p">{</span>
                                <span class="n">selenium</span><span class="p">.</span><span class="n">Stop</span><span class="p">();</span>
                        <span class="p">}</span>
                        <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>
                        <span class="p">{</span>
                                <span class="c1">// Ignore errors if unable to close the browser</span>
                        <span class="p">}</span>
                        <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">verificationErrors</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
                <span class="p">}</span>

<span class="na">                [Test]</span>
                <span class="k">public</span> <span class="k">void</span> <span class="nf">TheNewTest</span><span class="p">()</span>
                <span class="p">{</span>
                        <span class="n">selenium</span><span class="p">.</span><span class="n">Open</span><span class="p">(</span><span class="s">"/"</span><span class="p">);</span>
                        <span class="kt">string</span><span class="p">[]</span> <span class="n">inputParams</span> <span class="p">=</span> <span class="p">{</span><span class="s">"Hello World"</span><span class="p">,};</span>
                        <span class="n">proc</span><span class="p">.</span><span class="n">DoCommand</span><span class="p">(</span><span class="s">"alertWrapper"</span><span class="p">,</span> <span class="n">inputParams</span><span class="p">);</span>
                <span class="p">}</span>
        <span class="p">}</span>
<span class="p">}</span>
</pre></div>